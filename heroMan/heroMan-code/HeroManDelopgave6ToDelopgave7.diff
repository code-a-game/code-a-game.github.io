diff --git a/HeroManDelopgave6.js b/HeroManDelopgave7.js
index 8d348c4..4de731a 100644
--- a/HeroManDelopgave6.js
+++ b/HeroManDelopgave7.js
@@ -1,98 +1,105 @@
-// HeroMan subtask 6
+// HeroMan subtask 7
 // programming = 'Set your imagination free' / Jens Valdez
 // https://code-a-game.github.io
 
 let gameState;
 let heroMan;
 
 function setup() {
   createCanvas(600, 600);
 
   gameWonArea = new GameWonArea();
-
   setStartValues();
+
+  gameState = "GAME-IN-PROGRESS";
 }
 
 function draw() {
   background(220);
 
-  showGameState();
-  updateGameState();
-  validateGameState();
+  switch (gameState) {
+    case "GAME-IN-PROGRESS":
+      showGameState();
+      updateGameState();
+      validateGameState();
+      break;
+    case "GAME-WON":
+      showGameState();
+      break;
+  }
 }
 
 function setStartValues() {
   heroMan = new HeroMan();
 }
 
 function showGameState() {
   gameWonArea.show();
   heroMan.show();
 }
 
 function updateGameState() {
   heroMan.move();
 }
 
 function validateGameState() {
   if (heroMan.isInGameWonArea(gameWonArea)) {
-    fill(0)
-    text("Tillykke. Du har vundet spillet.", 100, 200)
+    gameState = "GAME-WON";
   }
 }
 
 class HeroMan {
   constructor() {
     this.x = 50;
     this.y = 50;
     this.radius = 25;
     this.colour = "yellow";
     this.moveSpeed = 2;
   }
 
   show() {
     fill(this.colour);
     circle(this.x, this.y, this.radius * 2);
   }
 
   move() {
     if (keyIsDown(LEFT_ARROW) && this.x - this.radius > 0) {
       this.x -= this.moveSpeed;
     }
     if (keyIsDown(RIGHT_ARROW) && this.x + this.radius < width) {
       this.x += this.moveSpeed;
     }
     if (keyIsDown(UP_ARROW) && this.y - this.radius > 0) {
       this.y -= this.moveSpeed;
     }
     if (keyIsDown(DOWN_ARROW) && this.y + this.radius < height) {
       this.y += this.moveSpeed;
     }
   }
 
   isInGameWonArea(gameWonArea) {
     return (
       this.x > gameWonArea.x &&
       this.y > gameWonArea.y &&
       this.x < gameWonArea.x + gameWonArea.boxWidth &&
       this.y < gameWonArea.y + gameWonArea.boxHeight
     );
   }
 }
 
 class GameWonArea {
   constructor() {
     this.boxWidth = 100;
     this.boxHeight = 100;
     this.x = width - this.boxWidth;
     this.y = height - this.boxHeight;
   }
 
   show() {
     fill(255);
     rect(this.x, this.y, this.boxWidth, this.boxHeight);
     fill(0);
     textSize(30);
     text("Goal", this.x + 10, this.y + 40);
   }
 }
